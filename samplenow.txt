const express=require("express");
// const path=require("path");
// const app=express();
// const session = require("express-session");
// const otpGenerator = require('otp-generator')
 const multer=require("multer");
// const nodemailer=require("nodemailer")
 const mongoose=require("mongoose");
// const { error } = require("console");
// const grid = require('gridfs-stream');
// // app.use(express.urlencoded({ extended: false ,limit: '50mb'}));
// // app.use(express.static(path.join(__dirname,"public")));
// const jwt=require("jsonwebtoken")
// const cookieParser=require("cookie-parser")
// const bodyParser = require('body-parser');
// // app.use(cookieParser())
// // app.use(express.json({ limit: '50mb' }));
// const { stringify } = require('querystring');
 var router = express.Router();
 const storage=multer.memoryStorage();
 const upload=multer({storage:storage});
// app.use(bodyParser.urlencoded({ extended: true }));
 const {employerprotect}=require("../middleware/employerprotect");
// var {jobschema,Corejob,Softwarejob}=require("../model/jobschemacoll");
// var Applicationcollection=require("../model/appschemacoll");
// var Employerdetail=require("../model/employerschemacoll");
const {employerloginhandler,employersendotp,employerloginverifyotp,employerloginconfirmpassword,findcandidate,findcandidatecompany,mypostfindcandidatecompany,getDocuments,getDocumentscompany,getCompanySuggestions,viewResumelink,sendmail,submitmail,jobpost,postjob,viewyourposts}=require("../controllers/employerlogincontroller.js")
router.get("/employerloginhandler",employerloginhandler)

router.get("/employerforgotpassword",(req,res)=>{
    res.render("employerforgotpassword.ejs");
})

router.post("/employersendotp",employersendotp)
router.post("/employerloginverifyotp",employerloginverifyotp)

router.post("/employerloginconfirmpassword",employerloginconfirmpassword)
    const newjobschema=new mongoose.Schema({
        companyname:{type:String,required:true
        },
        jobname:{type:String,
            required:true},

    openings: {type:Number,
            required:true},
    lastdate:{type:String,
              required:true},
     description:{
        type:String,
        required:true
     },
    logo:{
        data:Buffer,
        contentType:String

    }
      })
router.post("/findcandidate",employerprotect,findcandidate)
router.get("/findcandidatecompany",employerprotect,findcandidatecompany)
   router.get("/mypostfindcandidatecompany",employerprotect,mypostfindcandidatecompany)
   router.get("/getDocuments",employerprotect,getDocuments)
router.get("/getDocumentscompany",employerprotect,getDocumentscompany)
router.get("/getCompanySuggestions",employerprotect, getCompanySuggestions);
router.get("/viewResumelink",employerprotect,viewResumelink);
router.get("/sendmail",employerprotect,sendmail)

router.post("/submitmail",upload.single('attachment'),employerprotect,submitmail);
router.get("/jobpost",employerprotect,jobpost)
router.post("/postjob",upload.single("logo"),employerprotect,postjob)

// const start=async()=>{
// try{
//   app.listen(5000,()=>{
//       console.log("hurray u got connected");
//   })
//   //deekshithareddy2223
//   //gXkPedRi3ZJadM22
  
  
// }
// catch(error)
// {
//   console.log(error)

// }
// }
router.get("/viewyourposts",employerprotect,viewyourposts)
// router.get("/employerlogout",(req,res)=>{
//   res.clearCookie('employerjwt'); 
//     res.render('../views/index.ejs'); 
// })


module.exports=router




router.post("/employerlogin",async(req,res)=>{
    
    
    const email2=req.body.email1;
    const pass1=req.body.password1;
    const result =await Employerdetail.findOne({email:email2,eligible:true})
    const result1=await Employerdetail.countDocuments({email:email2,eligible:true})
    //const resultn=await db1.find({});
    try{
    if(result1)
    {  
    const result2 = await bcrypt.compare(pass1, result.pass);
    const token= result.tokens[0].token;
    console.log(token)
    if(result2>0)
    {
        res.cookie("employerjwt",token,{
            maxAge:10000000,
            httpOnly:true
        });
        res.render('../views/employerabout.ejs',{user:result.name});
    }
    else{
        console.log(email2);
        console.log(pass1);
        console.log(result2);
        console.log(result1);
        res.render('../views/employerlogin.ejs',{message:"wrong password"});
    } 
    }
    else{
        //console.log(resultn);
        console.log(email2);
        console.log(result1);
        res.render('../views/employerlogin.ejs',{message:"you don't have account"});
    }}
    catch (error) {
        console.error('Error comparing passwords:', error);
      }
    
    
})
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Application</title>
    <style>
        .logo {
            display: block;
            margin: auto;
            width: 50px;
            height: 50px;
        }
        
        .container {
            max-width: 955px;
            background-color: darkcyan;
            margin: auto;
            height: 60vh;
        }
        .message {
            background-color: red;
            width: 24%;
            padding: 10px;
            margin: 17px 2px;
            border: 2px solid black;
            border-radius: 10px;
        }
        .right {
            float: right;
            clear: both;
        }
        .left {
            float: left;
            clear: both;
        }
        #send-container {
            text-align: center;
        }
        body {
            background-color: lavender;
        }
    </style>
    <script src="/socket.io/socket.io.js"></script>
</head>
<body>
    <nav>
        <img src="./images/twitter.png" class="logo" />
        <div class="container"></div>
    </nav>
    <div class="send">
        <form action="#" id="send-container">
            <input type="text" name="messageInp" id="messageInp">
            <button class="btn" type="submit">Send</button>
        </form>
    </div>
    <h1>Chat</h1> 
  
    <script defer>
        const socket = io('http://localhost:6549');
        const form = document.getElementById('send-container');
        const messageInput = document.getElementById('messageInp');
        const messageContainer = document.querySelector(".container");

        const append = (message, position) => {
            const messageElement = document.createElement('div');
            messageElement.innerText = message;
            messageElement.classList.add('message');
            messageElement.classList.add(position);
            messageContainer.append(messageElement);
            if (position == 'left') {
                const audio = new Audio('../notification.mp3'); // Replace with the correct path
                audio.play();
            }
        }

        form.addEventListener('submit', (e) => {
            e.preventDefault();
            const message = messageInput.value;
            append(`you: ${message}`, 'right');
            socket.emit("send", message);
            messageInput.value = "";
        });

        const name1 = prompt("Enter your name");
        socket.emit('new-user-joined', name1);

        socket.on('user-joined', (data) => {
            append(`${data} joined the chat`, 'right');
        });

        socket.on('receive', data => {
            append(`${data.name}: ${data.message}`, 'left');
        });

        socket.on('left', name => {
            append(`${name} left the chat`, 'left');
        });
    </script>
</body>
</html>










const users = {};

io.on("connection", (socket) => {
    socket.on('new-user-joined', (username) => {
        console.log(username);
        users[socket.id] = username;
        socket.broadcast.emit('user-joined', username);
    });

    socket.on('send', (message) => {
        socket.broadcast.emit('receive', { message: message, username: users[socket.id] });
    });

    socket.on('disconnect', () => {
        socket.broadcast.emit('left', users[socket.id]);
        delete users[socket.id];
    });
});


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Application</title>
    <!-- Bootstrap CSS -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <style>
        /* Custom CSS */
        body, html {
            height: 100%;
            margin: 0;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .container1 {
            width: 1000px; /* Adjust the width as needed */
            height: 700px; /* Adjust the height as needed */
            overflow: hidden; /* Hide overflow content */
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); /* Add shadow */
        }
        .container {
            background-color: #f8f9fa;
            height: 600px ;/* Adjusted to fill entire container1 minus the height of the navbar and input section */
            overflow-y: scroll;
            padding: 10px;
        }
        .message {
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 10px;
            max-width: 70%;
        }
        .right {
            background-color: #007bff;
            color: white;
            float: right;
            clear: both; /* Ensures messages are not appended side by side */
        }
        .left {
            background-color: #e9ecef;
            clear: both; /* Ensures messages are not appended side by side */
        }
        #send-container {
            text-align: center;
            margin-top: 20px;
        }
        .navbar-dark {
            background-color: #343a40 !important; /* Override Bootstrap default */
        }
        .navbar-brand {
            margin-right: 0; /* Adjust margin */
        }
        /* Custom style for send button */
        #sendBtn {
            background-color: green;
            border-color: green;
        }
        #sendBtn:hover {
            background-color: darkgreen;
            border-color: darkgreen;
        }
        .logo {
            width: 30px; /* Adjust the size as needed */
            margin-right: 10px;
             /* Add margin for spacing */
        }

        /* Modal styles */
        .modal {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 1; /* Sit on top */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
            padding-top: 100px; /* Location of the box */
        }

        /* Modal Content */
        .modal-content {
            background-color: #fefefe;
            margin: auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 400px;
            border-radius: 10px;
        }

        /* Close Button */
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
    </style>
</head>
<body>
   
    <button class="btn btn-danger btn-block mt-3" id="endChatBtn">End Chat</button>
<div class="container1">
    <nav class="navbar navbar-dark bg-dark">
        <div class="container-fluid">
            <img src="./images/logo.png" class="logo" alt="Logo">
            <span class="navbar-brand mb-0 h1">JobForge</span>
            <span id="usernameDisplay" class="ml-auto navbar-brand mb-0 h1"></span> <!-- Display username here -->
            <img src="/images/icons8-test-account-96.png" class="logo" alt="Profile Logo">
        </div>
    </nav>
    
    <div class="container" id="messageContainer">
        <!-- Message container -->
    </div>
    <div id="send-container" class="mb-0">
        <div class="container-fluid">
            <div class="row">
                <div class="col-10">
                    <input type="text" name="messageInp" id="messageInp" class="form-control" placeholder="Type your message">
                </div>
                <div class="col-2">
                    <button class="btn btn-primary btn-block" type="submit" id="sendBtn">Send</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal HTML -->
<div id="myModal" class="modal">
  <div class="modal-content">
    <span class="close">&times;</span>
    <input type="text" id="username" placeholder="Enter your name ">
    <button id="joinChat">Join Chat</button>
  </div>
</div>

<!-- Bootstrap JS and Socket.io -->
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io('http://localhost:6556');
    const messageInput = document.getElementById('messageInp');
    const messageContainer = document.getElementById('messageContainer');
    const usernameDisplay = document.getElementById('usernameDisplay');

    const appendMessage = (message, position) => {
        const messageElement = document.createElement('div');
        messageElement.innerText = message;
        messageElement.classList.add('message', position);
        messageContainer.appendChild(messageElement);
        if (position === 'left') {
            const audio = new Audio('../notification.mp3'); // Replace with the correct path
            audio.play();
        }
        // Scroll to bottom
        messageContainer.scrollTop = messageContainer.scrollHeight;
    };

    document.getElementById('sendBtn').addEventListener('click', () => {
        const message = messageInput.value.trim();
        if (message !== '') {
            appendMessage(`You: ${message}`, 'right');
            socket.emit("send", message);
            messageInput.value = "";
        }
    });

    window.onload = function() {
        const modal = document.getElementById("myModal");
        modal.style.display = "block";
    }

    document.querySelector(".close").addEventListener("click", () => {
        const modal = document.getElementById("myModal");
        modal.style.display = "none";
    });

    document.getElementById('joinChat').addEventListener('click', () => {
        const username = document.getElementById('username').value;

        usernameDisplay.textContent = username;

        socket.emit('new-user-joined', username);

        const modal = document.getElementById("myModal");
        modal.style.display = "none";
    });

    socket.on('receive', (data) => {
        appendMessage(`${data.username}: ${data.message}`, 'left');
    });

    socket.on('user-joined', (username) => {
        appendMessage(`${username} joined the chat`, 'right');
    });

    socket.on('left', (username) => {
        appendMessage(`${username} left the chat`, 'left');
    });

    document.getElementById('endChatBtn').addEventListener('click', () => {
        socket.disconnect();
    });
</script>
</body>
</html>


